name: Analyse de S√©curit√© (DAST) avec OWASP ZAP

on:
push:
branches: [ "main" ]
workflow_dispatch:

jobs: zap_scan: 
runs-on: ubuntu-latest
env:
  # L'URL cible de l'application Flask, accessible localement sur le runner
  TARGET_URL: http://127.0.0.1:5000
  
steps:
  
  # 1. Checkout du code
  - name: ‚¨áÔ∏è V√©rification du d√©p√¥t
    uses: actions/checkout@v4

  # 2. Installation de Python et D√©marrage du Serveur Flask
  - name: ‚öôÔ∏è Configuration de l'environnement Python et D√©marrage du Serveur
    run: |
      # Installation des outils de base et de Python
      sudo apt update -y
      sudo apt install -y python3 python3-pip curl
      
      # Installation des d√©pendances Python (important pour l'environnement CI)
      # Le flag '--break-system-packages' est important dans l'environnement GitHub Actions
      pip install -r requirements.txt --break-system-packages
      
      # Lancement du serveur en arri√®re-plan. 
      # Utilisation de 'nohup' et sp√©cification de l'h√¥te/port pour un d√©marrage robuste.
      FLASK_APP=app.py nohup python3 -m flask run --host=0.0.0.0 --port=5000 > server.log 2>&1 &

      echo "‚è≥ D√©marrage du serveur Flask et v√©rification de la disponibilit√©..."
      
      # Boucle d'attente intelligente (v√©rifie 10 fois toutes les 5 secondes)
      for i in {1..10}; do
        # curl -s v√©rifie l'accessibilit√© silencieusement
        curl -s ${{ env.TARGET_URL }} && echo "‚úÖ Serveur d√©marr√© !" && break
        echo "üîÑ Tentative $i/10..."
        sleep 5
        # Si nous atteignons 10 tentatives sans succ√®s, on arr√™te le workflow.
        if [ $i -eq 10 ]; then
          echo "‚ùå Le serveur Flask n'a pas d√©marr√© apr√®s 50 secondes."
          cat server.log
          exit 1
        fi
      done

  # 3. Lancement du scan OWASP ZAP (Solution Fonctionnelle)
  - name: üõ°Ô∏è Lancement du ZAP Baseline Scan
    # Utilisation de l'Action GitHub zaproxy/action-baseline, qui g√®re le r√©seau Docker.
    uses: zaproxy/action-baseline@v0.12.0
    with:
      target: ${{ env.TARGET_URL }}
      html_report: zap_report.html
      # Ne pas faire √©chouer le workflow pour le moment
      fail_action: false
      
  # 4. Sauvegarde des Artefacts
  - name: üì¶ Sauvegarde du Rapport et du Log
    # if: always() assure l'ex√©cution m√™me si l'√©tape ZAP √©choue
    if: always()
    uses: actions/upload-artifact@v4
    with:
      name: rapport-zap
      path: |
        zap_report.html
        server.log
